@objc(RecaptchaEnterpriseReactNative)
class RecaptchaEnterpriseReactNative: NSObject {
  var recaptchaClient: RecaptchaClient?

  private func mapAction(_ actionStr: String) -> RecaptchaAction {
    if actionStr.caseInsensitiveCompare("login") == .orderedSame {
      return RecaptchaAction(action: .login)
    } else if actionStr.caseInsensitiveCompare("signup") == .orderedSame {
      return RecaptchaAction(action: .signup)
    } else {
      return RecaptchaAction(customAction: actionStr)
    }
  }

  @objc(initClient:withResolver:withRejecter:)
  func initClient(
    siteKey: String, resolve: @escaping RCTPromiseResolveBlock,
    reject: @escaping RCTPromiseRejectBlock
  ) {
    Task { @MainActor in

      Recaptcha.getClient(siteKey: siteKey) { recaptchaClient, error in
        if let recaptchaClient = recaptchaClient {
          self.recaptchaClient = recaptchaClient
          resolve("ok")
        } else if let error = error {
          reject(String(error.errorCode), error.errorMessage, nil)
        }
      }
    }
  }

  @objc(execute:withResolver:withRejecter:)
  func execute(
    actionStr: String, resolve: @escaping RCTPromiseResolveBlock,
    reject: @escaping RCTPromiseRejectBlock
  ) {
    guard let client = recaptchaClient else {
      reject("RN_EXECUTE_FAILED", "Initialize client first", nil)
      return
    }
    let action = mapAction(actionStr)
    client.execute(action) { (token, error) -> Void in
      if let token = token {
        resolve(token.recaptchaToken)
      } else if let error = error {
        reject(String(error.code), error.errorMessage, nil)
      }
    }
  }
}
